{"version":3,"sources":["webpack:///./src/components/json/CategoryJsonLd.js","webpack:///./src/templates/categories.js"],"names":["CategoryJsonLD","categorySlug","categoryName","query","jsonLdCategoryQuery","render","data","siteUrl","site","siteMetadata","jsonBreadCrumbs","itemListElement","position","item","name","Helmet","type","JSON","stringify","Heading","styled","h1","CategoryTemplate","this","props","pageContext","posts","allMarkdownRemark","edges","location","category","categoryObject","categories","find","cat","slug","Layout","title","SEO","CategoryJsonLd","CategoryMenu","map","node","PostCard","key","fields","React","Component","pageQuery"],"mappings":"6QA6CeA,EAzCQ,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aACtC,OACE,kBAAC,cAAD,CACEC,MAAOC,EACPC,OAAQ,SAACC,GAAU,IACTC,EAAYD,EAAKE,KAAKC,aAAtBF,QAEFG,EAAkB,CACtB,WAAY,oBACZ,QAAS,iBACTC,gBAAiB,CACf,CACE,QAAS,WACTC,SAAU,EACVC,KAAM,CACJ,MAAON,EACPO,KAAM,SAGV,CACE,QAAS,WACTF,SAAU,EACVC,KAAM,CACJ,MAAUN,EAAV,IAAqBN,EACrBa,KAAMZ,MAKd,OACE,kBAACa,EAAA,OAAD,KACE,4BAAQC,KAAK,uBACVC,KAAKC,UAAUR,MA9B1B,UAyCEN,EAAmB,aCtCzB,IAAMe,E,UAAUC,EAAOC,GAAV,0EAAGD,CAAH,yGASPE,E,gLACJjB,OAAA,WAAU,IAAD,EACuBkB,KAAKC,MAA3BlB,EADD,EACCA,KAAMmB,EADP,EACOA,YACRC,EAAQpB,EAAKqB,kBAAkBC,MAC7BC,EAAaN,KAAKC,MAAlBK,SAEF5B,EAAewB,EAAYK,SAC3BC,EAAiBzB,EAAKE,KAAKC,aAAauB,WAAWC,MAAK,SAAAC,GAC5D,OAAOA,EAAIC,OAASlC,KAGhBC,EAAe6B,EAAiBA,EAAejB,KAAOb,EAE5D,OACE,kBAACmC,EAAA,EAAD,CAAQP,SAAUN,KAAKC,MAAMK,SAAUQ,MAAOnC,GAC5C,kBAACoC,EAAA,EAAD,CAAKD,MAAOnC,IACZ,kBAACqC,EAAD,CACEtC,aAAcA,EACdC,aAAcA,IAEhB,kBAACsC,EAAA,EAAD,CAAcX,SAAUA,IACxB,kBAACV,EAAD,KAAUjB,GACTwB,EAAMe,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,OAAO,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAKG,OAAOV,KAAMO,KAAMA,S,GAvBzBI,IAAMC,WAgCxBC,GAFE1B,YAEO,e","file":"component---src-templates-categories-js-8876394f6d350283dd17.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { StaticQuery, graphql } from \"gatsby\";\n\nconst CategoryJsonLD = ({ categorySlug, categoryName }) => {\n  return (\n    <StaticQuery\n      query={jsonLdCategoryQuery}\n      render={(data) => {\n        const { siteUrl } = data.site.siteMetadata;\n        //bread crumbs\n        const jsonBreadCrumbs = {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": siteUrl,\n                name: \"HOME\",\n              },\n            },\n            {\n              \"@type\": \"ListItem\",\n              position: 2,\n              item: {\n                \"@id\": `${siteUrl}/${categorySlug}`,\n                name: categoryName,\n              },\n            },\n          ],\n        };\n        return (\n          <Helmet>\n            <script type=\"application/ld+json\">\n              {JSON.stringify(jsonBreadCrumbs)}\n            </script>\n          </Helmet>\n        );\n      }}\n    />\n  );\n};\n\nexport default CategoryJsonLD;\n\nconst jsonLdCategoryQuery = graphql`\n  query jsonLdCategoryQuery {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/Layout\";\nimport SEO from \"../components/SEO\";\nimport PostCard from \"../components/PostCard\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport CategoryJsonLd from \"../components/json/CategoryJsonLd\";\nimport styled from \"styled-components\";\n\nconst Heading = styled.h1`\n  margin: 0.5em 0 0.8em;\n  font-size: 32px;\n  color: #fff;\n  font-weight: 600;\n  line-height: 44px;\n  letter-spacing: 1px;\n`;\n\nclass CategoryTemplate extends React.Component {\n  render() {\n    const { data, pageContext } = this.props;\n    const posts = data.allMarkdownRemark.edges;\n    const { location } = this.props;\n    // get Category name from category slug\n    const categorySlug = pageContext.category;\n    const categoryObject = data.site.siteMetadata.categories.find(cat => {\n      return cat.slug === categorySlug;\n    });\n    // use slug when name doesn't exist\n    const categoryName = categoryObject ? categoryObject.name : categorySlug;\n\n    return (\n      <Layout location={this.props.location} title={categoryName}>\n        <SEO title={categoryName} />\n        <CategoryJsonLd\n          categorySlug={categorySlug}\n          categoryName={categoryName}\n        />\n        <CategoryMenu location={location} />\n        <Heading>{categoryName}</Heading>\n        {posts.map(({ node }) => {\n          return <PostCard key={node.fields.slug} node={node} />;\n        })}\n      </Layout>\n    );\n  }\n}\n\nexport default CategoryTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostByCategory($category: String) {\n    site {\n      siteMetadata {\n        categories {\n          name\n          slug\n          color\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY.MM.DD\")\n            title\n            emoji\n            category\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}