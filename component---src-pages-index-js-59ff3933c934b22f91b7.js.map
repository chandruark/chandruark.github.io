{"version":3,"sources":["webpack:///./src/components/json/HomeJsonLd.js","webpack:///./src/pages/index.js"],"names":["JsonLD","query","jsonLdHomeQuery","render","data","site","siteMetadata","title","siteUrl","description","author","jsonLd","image","url","height","width","name","publisher","logo","Helmet","type","JSON","stringify","BlogIndex","this","props","siteTitle","posts","allMarkdownRemark","edges","location","Layout","SEO","rel","href","HomeJsonLd","CategoryMenu","map","node","PostCard","key","fields","slug","React","Component","pageQuery"],"mappings":"2dAmDeA,EA/CA,WACb,OACE,kBAAC,cAAD,CACEC,MAAOC,EACPC,OAAQ,SAACC,GAAU,IAAD,EACgCA,EAAKC,KAAKC,aAAlDC,EADQ,EACRA,MAAOC,EADC,EACDA,QAASC,EADR,EACQA,YAAaC,EADrB,EACqBA,OAa/BC,EAAS,CACb,WAAY,oBACZ,QAAS,UACTC,MAAO,CACL,QAAS,cACTC,IAAQL,EAAL,kBACHM,OAAQ,KACRC,MAAO,KAETF,IAAKL,EACLQ,KAAMT,EACNG,OAAQ,CACN,QAAS,SACTM,KAAMN,GAERD,YAAaA,EACbQ,UA3BgB,CAChB,QAAS,eACTD,KAAMN,EACNQ,KAAM,CACJ,QAAS,cACTL,IAAQL,EAAL,qBACHO,MAAO,IACPD,OAAQ,OAuBZ,OACE,kBAACK,EAAA,OAAD,KACE,4BAAQC,KAAK,uBAAuBC,KAAKC,UAAUX,MArC3D,UA+CET,EAAe,a,IC3CfqB,E,gLACJpB,OAAA,WAAU,IACAC,EAASoB,KAAKC,MAAdrB,KACFsB,EAAYtB,EAAKC,KAAKC,aAAaC,MACnCoB,EAAQvB,EAAKwB,kBAAkBC,MAC7BC,EAAaN,KAAKC,MAAlBK,SAER,OACE,kBAACC,EAAA,EAAD,CAAQD,SAAUN,KAAKC,MAAMK,SAAUvB,MAAOmB,GAC5C,kBAACM,EAAA,EAAD,CAAKzB,MAAM,KACX,kBAACY,EAAA,OAAD,KACE,0BAAMc,IAAI,YAAYC,KAAK,+BAE7B,kBAACC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAcN,SAAUA,IACvBH,EAAMU,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,OAAO,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAKG,OAAOC,KAAMJ,KAAMA,S,GAhBhCK,IAAMC,WAyBjBC,GAFEtB,YAEO","file":"component---src-pages-index-js-59ff3933c934b22f91b7.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { StaticQuery, graphql } from \"gatsby\";\n\nconst JsonLD = () => {\n  return (\n    <StaticQuery\n      query={jsonLdHomeQuery}\n      render={(data) => {\n        const { title, siteUrl, description, author } = data.site.siteMetadata;\n\n        const publisher = {\n          \"@type\": \"Organization\",\n          name: author,\n          logo: {\n            \"@type\": \"ImageObject\",\n            url: `${siteUrl}/images/avatar.png`,\n            width: 150,\n            height: 150,\n          },\n        };\n\n        const jsonLd = {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"WebSite\",\n          image: {\n            \"@type\": \"ImageObject\",\n            url: `${siteUrl}/images/ogp.png`,\n            height: 1200,\n            width: 630,\n          },\n          url: siteUrl,\n          name: title,\n          author: {\n            \"@type\": \"Person\",\n            name: author,\n          },\n          description: description,\n          publisher,\n        };\n\n        return (\n          <Helmet>\n            <script type=\"application/ld+json\">{JSON.stringify(jsonLd)}</script>\n          </Helmet>\n        );\n      }}\n    />\n  );\n};\n\nexport default JsonLD;\n\nconst jsonLdHomeQuery = graphql`\n  query JsonLdHomeQuery {\n    site {\n      siteMetadata {\n        title\n        siteUrl\n        description\n        author\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { Helmet } from \"react-helmet\";\n\nimport Layout from \"../components/Layout\";\nimport SEO from \"../components/SEO\";\nimport PostCard from \"../components/PostCard\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport HomeJsonLd from \"../components/json/HomeJsonLd\";\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props;\n    const siteTitle = data.site.siteMetadata.title;\n    const posts = data.allMarkdownRemark.edges;\n    const { location } = this.props;\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"\" />\n        <Helmet>\n          <link rel=\"canonical\" href=\"https://chandru.github.io\" />\n        </Helmet>\n        <HomeJsonLd />\n        <CategoryMenu location={location} />\n        {posts.map(({ node }) => {\n          return <PostCard key={node.fields.slug} node={node} />;\n        })}\n      </Layout>\n    );\n  }\n}\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY.MM.DD\")\n            title\n            emoji\n            category\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}